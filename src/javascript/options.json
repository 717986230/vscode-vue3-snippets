{
  "Vue Options": {
    "prefix": "Vue.options",
    "body": [
      "// 组件/实例的选项应该有统一的顺序。",
      "// 这是我们推荐的组件选项默认顺序。它们被划分为几大类，所以你也能知道从插件里添加的新 property 应该放到哪里。",
      "// @link https://v3.vuejs.org/style-guide/#component-instance-options-order-recommended",
      "export default {",
      "\t// 1. 全局感知 (要求组件以外的知识)",
      "\t// Global Awareness (requires knowledge beyond the component)",
      "\tname: 'FEATURE',",
      "",
      "\t// 2. 插值和数据绑定，Interpolation and data-binding",
      "\t// Template Modifiers (changes the way templates are compiled)",
      "\tdelimiters: ['{{', '}}'], // Array<string>",
      "",
      "\t// 3. 模板依赖 (模板内使用的资源)",
      "\t// Template Dependencies (assets used in the template)",
      "\tcomponents: {}, // { [key: string]: Component }",
      "\tdirectives: {}, // { [key: string]: DirectiveFunction | DirectiveOptions }",
      "",
      "\t// 4. 组合 (向选项里合并 property)",
      "\t// Composition (merges properties into the options)",
      "\textends: {}, // Object | Function",
      "\tmixins: [], // Array<Object>",
      "\tprovide: {}, // Object | () => Object",
      "\tinject: [], // Array<string> | { [key: string]: string | Symbol | Object }",
      "",
      "\t// 5. 接口 (组件的接口)",
      "\t// Interface (the interface to the component)",
      "\tinheritAttrs: true,",
      "\tprops: {}, // Array<string> | Object",
      "\temits: [], // Array<string> | Object",
      "",
      "\t// 6. 组合式 API (使用组合式 API 的入口点)",
      "\t// Composition API (the entry point for using the Composition API)",
      "\tsetup() {},",
      "",
      "\t// 7. 本地状态 (本地的响应式 property)",
      "\t// Local State (local reactive properties)",
      "\t// Function",
      "\tdata() {",
      "\t\treturn {};",
      "\t},",
      "\t// { [key: string]: Function | { get: Function, set: Function } }",
      "\tcomputed: {",
      "\t\tfoo() {",
      "\t\t\treturn;",
      "\t\t},",
      "\t\tbar: {",
      "\t\t\tget() {",
      "\t\t\t\treturn;",
      "\t\t\t},",
      "\t\t\tset(val) {",
      "\t\t\t\tthis.qux = v;",
      "\t\t\t},",
      "\t\t},",
      "\t},",
      "",
      "\t// 8. 事件 (通过响应式事件触发的回调)",
      "\t// Events (callbacks triggered by reactive events)",
      "\twatch: {}, // { [key: string]: string | Function | Object | Array}",
      "",
      "\t// 生命周期钩子 (按照它们被调用的顺序)",
      "\t// Lifecycle Events (in the order they are called) ",
      "\tbeforeCreate() {},",
      "\tcreated() {},",
      "\tbeforeMount() {},",
      "\tmounted() {},",
      "\tbeforeUpdate() {},",
      "\tupdated() {},",
      "\tactivated() {},",
      "\tdeactivated() {},",
      "\tbeforeUnmount() {},",
      "\tunmounted() {},",
      "\terrorCaptured() {}, // (err: Error, instance: Component, info: string) => ?boolean",
      "\trenderTracked() {}, // (e: DebuggerEvent) => void",
      "\trenderTriggered() {}, // (e: DebuggerEvent) => void",
      "",
      "\t// 9. 非响应式的 property (不依赖响应性系统的实例 property)",
      "\t// Non-Reactive Properties (instance properties independent of the reactivity system)",
      "\tmethods: {}, // { [key: string]: Function }",
      "",
      "\t// 10. 渲染 (组件输出的声明式描述)",
      "\t// Rendering (the declarative description of the component output)",
      "\ttemplate: '', // string",
      "\trender() {}, // Function",
      "};"
    ],
    "description": "Component/instance options order"
  }
}
