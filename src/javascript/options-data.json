{
	"option data()": {
		"prefix": "option.data()",
		"body": [
			"data() {",
			"  return {",
			"    ${1:property}: ${2:'${3:value}'},$4",
			"  };",
			"},$0"
		],
		"description": "Type: Object | Function\n"
	},
	"option props": {
		"prefix": "option.props",
		"body": ["props: {", "  $1", "},$0"],
		"description": "Type: Array<string> | Object\n"
	},

	"option emits": {
		"prefix": "option.emits",
		"body": ["emits: ['${1:events}'],$0"],
		"description": "Type: `Array<string> | Object`.\nA list/hash of custom events that can be emitted from the component. It has an Array-based simple syntax and an alternative Object-based syntax that allows to configure an event validation.\nIn Object-based syntax, the value of each property can either be `null` or a validator function. The validation function will receive the additional arguments passed to the `$emit` call. For example, if `this.$emit('foo', 1)` is called, the corresponding validator for `foo` will receive the argument `1`. The validator function should return a boolean to indicate whether the event arguments are valid.\n"
	},

	"option computed": {
		"prefix": "option.computed",
		"body": [
			"computed: {",
			"  ${1:property}() {",
			"    return this.${2:property};",
			"  },",
			"  ${3:property}: {",
			"    get() {",
			"      return this.${4:property};",
			"    },",
			"    set(${5:val}) {",
			"      this.${6:property} = $5;",
			"    },",
			"  },$0",
			"},"
		],
		"description": "Type: { [key: string]: Function | { get: Function, set: Function } }\nComputed properties to be mixed into the Vue instance. All getters and setters have their this context automatically bound to the Vue instance.\nNote that if you use an arrow function with a computed property, `this` won’t be the component’s instance, but you can still access the instance as the function’s first argument.\n"
	},
	"option methods": {
		"prefix": "option.methods",
		"body": [
			"methods: {",
			"  ${1:methodName}($2) {",
			"    $3",
			"  },$0",
			"},"
		],
		"description": "Type: { [key: string]: Function }\n"
	},
	"option watch": {
		"prefix": "option.watch",
		"body": [
			"watch: {",
			"  ${1:propertyName}(newValue, oldValue) {",
			"    $2",
			"  },$0",
			"},"
		],
		"description": "Type: { [key: string]: String | Function | Object | Array}\nString: methodName,\nFunction: handler(val, oldVal),\nObject: {handler(val, oldVal): Function, deep: Boolean, immediate: Boolean},\nArray: [String, Object, Function]\nAn object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call `$watch()` for each entry in the object at instantiation.\n"
	},
	"option watch property": {
		"prefix": "option.watchProperty",
		"body": [
			"${1:propertyName}(newValue, oldValue) {",
			"  $2",
			"},$0"
		]
	},
	"option watch property (deep)": {
		"prefix": "option.watchPropertyDeep",
		"body": [
			"${1:propertyName}: {",
			"  handler(newValue, oldValue) {",
			"    $2",
			"  },",
			"  deep: true,",
			"},$0"
		]
	},
	"option watch property (immediate)": {
		"prefix": "option.watchPropertyImmediate",
		"body": [
			"${1:propertyName}: {",
			"  handler(newValue, oldValue) {",
			"    $2",
			"  },",
			"  immediate: true,",
			"},$0"
		]
	},
	"option watch property (deep, immediate)": {
		"prefix": "option.watchPropertyDeepImmediate",
		"body": [
			"${1:propertyName}: {",
			"  handler(newValue, oldValue) {",
			"    $2",
			"  },",
			"  deep: true,",
			"  immediate: true,",
			"},$0"
		]
	}
}
